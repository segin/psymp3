#summary A Win32 window class implemented by MSN Messenger and other compatible messengers
#labels Phase-Implementation,Featured

= Introduction =

The MsnMsgrUiManager window class is implemented by Windows Live Messsenger, MSN Messenger, and my any messenger application (or associated plugins thereof) that wish to receive "Now Playing" data from any media player application that supports sending such data to MSN Messenger.

= Known Implementations = 

== Messengers == 

The following instant messaging applications are known to implement the receiving end of the interface:
  * [http://download.live.com/messenger Windows Live Messenger]
  * *[http://www.pidgin.im/ Pidgin]* (via [http://code.google.com/p/pidgin-musictracker pidgin-musictracker])
  * *[http://www.amsn-project.net/ aMSN]* (via the [http://www.amsn-project.net/plugins.php#13 Music] plugin)

===Libraries===
Libraries that implement the receiver interface on the behalf of a messenger or status-display app:
  * [http://libmsnmsgruimanager.codeplex.com/ libMsnMsgrUIManager] - which in fact is implemented using this exact documentation page for interface specs.

== Media Players ==

The following media players are known to implement the sending end of the interface:
  * *PsyMP3*
  * [http://www.microsoft.com/windows/windowsmedia/player/ Windows Media Player]
  * [http://www.apple.com/itunes iTunes]
  * [http://www.last.fm/download Last.fm Client]
  * [http://getopenpandora.appspot.com/ OpenPandora]
  * [http://mpc-hc.sourceforge.net/ Media Player Classic Home Cinema]
  * [http://getsongbird.com/ Songbird] (via the [http://addons.songbirdnest.com/addon/1204 LiveTweeter] extension)
  * [http://www.spotify.com/ Spotify]
  * [http://wwwct.ttplayer.com/index.html TTPlayer]
  * [http://www.videolan.org/vlc/ VLC (VideoLan Client) Media Player]

= Details =

The MsnMsgrUiManager Now Playing interface is rather straightforward. The sender program (the media player) sends a [http://msdn.microsoft.com/en-us/library/ms649011(VS.85).aspx WM_COPYDATA] message to any and all windows matching the MsnMsgrUiManager window class using the [http://msdn.microsoft.com/en-us/library/ms644950(VS.85).aspx SendMessage]()  function.

The [http://msdn.microsoft.com/en-us/library/ms649011(VS.85).aspx WM_COPYDATA] message type requires the use of the [http://msdn.microsoft.com/en-us/library/ms649010(VS.85).aspx COPYDATASTRUCT] struct, which has three defined elements:
  * dwData, which indicates the data type
  * cbData, which indicates the length of the data buffer pointed to by lpData, and finally
  * lpData, which is a pointer to a buffer containing the data to be passed via [http://msdn.microsoft.com/en-us/library/ms644950(VS.85).aspx SendMessage]()

The actual message data passed via lpData is a wide-character string, terminated by a null character. The data fields are delimited by literal wide-character "\0" (literal backslash and literal zero, NOT a null-value wide character).

The fields are described below:
  # `[iTunes extension]` Player name. If you don't really care, leave it empty.
  # Message type. There a number of things you could put here, but the only important value for this is "Music".
  # Status Enabled. Does the message enable or disable the now playing information? When announcing a new song, this is "1", and at the end of a song (to clear the now playing from the messenger), this is "0".
  # Format string. This is only really important for MSN Messenger and Windows Live Messenger. It is either string data to be used literally, or tokens referencing the argument strings, which come next. Each argument is referenced by it's argument number, starting with 0, enclosed in curly brackets (`"{" and "}"`).
  # Song Title. This is the first argument string, and is the title of the song.
  # Artist. This is the second argument string, and is the name of the song artist.
  # Album. This is the third argument string, and is the name of the album which the song is on.
  # WMContentID. This is the string "WMContentID".

So, in order, the final string looks like this (remember, this is entirely literals, nothing here is really escaped):
"1\02\03\04\05\06\07\08\0" 

Now, assume the following information:

  * Player: "PsyMP3"
  * Format: "PsyMP3: {1} - {0}"
  * Artist: "[http://www.last.fm/music/DragonForce Dragonforce]"
  * Title: "[http://www.last.fm/music/DragonForce/_/Through+the+Fire+and+Flames Through The Fire And Flames]"
  * Album: "[http://www.last.fm/music/DragonForce/Inhuman+Rampage Inhuman Rampage]"

Then you would get the string:

"PsyMP3\0Music\01\0PsyMP3: {1} - {0}\0Through The Fire And Flames\0Dragonforce\0Inhuman Rampage\0WMContentID\0".

The format string is only used by Windows Live Messenger, and it would set the display on Windows Live Messenger to say "PsyMP3: Dragonforce - Through The Fire And Flames". 

You could omit the opening "PsyMP3" and start off with the first "\0"; the player name field there is an extension that originates from iTunes.

Remember to escape the backslash in C strings, e.g. "\\0" in C (to get literal "\0")

Once you have the string formatted, set the lpData element in the [http://msdn.microsoft.com/en-us/library/ms649010(VS.85).aspx COPYDATASTRUCT] struct to be the pointer to the message string. Set the cpData field to be length of the string, in characters, doubled, with two added after that, or in C, (([http://msdn.microsoft.com/en-us/library/78zh94ax(VS.80).aspx wcslen](message) `*` 2) + 2). Finally, set the dwData element to 1351.

Once you have the [http://msdn.microsoft.com/en-us/library/ms649010(VS.85).aspx COPYDATASTRUCT] structure filled out, now it's time to pass it to the instant messenger application via [http://msdn.microsoft.com/en-us/library/ms644950(VS.85).aspx SendMessage](). The first argument to [http://msdn.microsoft.com/en-us/library/ms644950(VS.85).aspx SendMessage]() will be the window handle to the messenger window (which you should have found using either [http://msdn.microsoft.com/en-us/library/ms633499(VS.85).aspx FindWindow]() or preferably [http://msdn.microsoft.com/en-us/library/ms633500(VS.85).aspx FindWindowEx]()). The second argument, the message type, is [http://msdn.microsoft.com/en-us/library/ms649011(VS.85).aspx WM_COPYDATA], while the wParam argument (the third argument) is the hWnd of your program's window - you can set this to 0 if it is not applicable. The lParam argument (final argument for [http://msdn.microsoft.com/en-us/library/ms644950(VS.85).aspx SendMessage]) will be the pointer to the [http://msdn.microsoft.com/en-us/library/ms649010(VS.85).aspx COPYDATASTRUCT] structure.

To clear the now playing from the messenger, send a message string with field 3 being "0" instead of "1".

For more information, please reference the implementation in the PsyMP3 source code.